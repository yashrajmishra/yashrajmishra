{"componentChunkName":"component---src-templates-post-js","path":"/pensieve/get-to-know-firebase","result":{"data":{"markdownRemark":{"html":"<p>Have you ever wanted to make a simple web app? Well, if you have, you will probably be aware of the fact that an app has normally a back-end which includes the logic and integration with a database, and a front-end which helps the user interact with our application.</p>\n<p>So, returning to the previous question, If you want a simple app in which requires a small database and some users, Is there a need for a full back-end system? Well no, actually there is a really cool service from Google called Firebase which gives you a pretty good database and</p>\n<p><strong><em>I am going to teach you the following basics of ðŸ”¥ Firebase Cloud Firestore :-</em></strong></p>\n<ol>\n<li>Add/Create A Document To Cloud Firestore</li>\n<li>Update A Document Data to Cloud Firestore</li>\n<li>Delete Document from Cloud Firestore</li>\n<li>Get Documents Data from Firestore Database</li>\n<li>Get A Single Document Data</li>\n<li>Get Data from Sub-collection in Firestore</li>\n<li>Firestore Single/Multiple Where Query Filter</li>\n<li>OrderBy and Limit Filters</li>\n<li>Collection Group Queries</li>\n<li>Firestore Pagination Queries using Query Cursors</li>\n<li>Conclusion</li>\n</ol>\n<h2>Add/Create A Document To Cloud Firestore</h2>\n<p>There are two ways to create/add a new document to the Cloud Firestore, which are:</p>\n<ul>\n<li>add()</li>\n<li>set()</li>\n</ul>\n<p>Letâ€™s take a look at <code class=\"language-text\">add()</code> method sample code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'mishra.yashrajs@email.com'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><em>To run the sample code in your project, you will need to <a href=\"https://firebase.google.com/docs/web/setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">add Firebase to your project</a>.</em></p>\n</blockquote>\n<p>First, get a reference to the Firestore database using <code class=\"language-text\">firestore()</code> method and store it in <code class=\"language-text\">db</code>.</p>\n<p>Then, obtain a reference to the users collection by invoking <code class=\"language-text\">collection()</code> method on the <code class=\"language-text\">db</code> object.</p>\n<p>Finally, run <code class=\"language-text\">add()</code> method by passing new data as a JavaScript object.</p>\n<p>Thatâ€™s it.</p>\n<p>Letâ€™s take a look at <code class=\"language-text\">set()</code> method.</p>\n<p>As you can see below, the <code class=\"language-text\">set()</code> method is very similar to <code class=\"language-text\">add()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'mishra.yashrajs@email.com'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The only difference is that you can add a document to a collection directly using <code class=\"language-text\">add()</code>method, but for the <code class=\"language-text\">set()</code> method you need to explicitly specify the document identifier by invoking <code class=\"language-text\">doc().</code></p>\n<p>If you do not specify a document identifier, it will be created.</p>\n<blockquote>\n<p>Under the hood, both <code class=\"language-text\">set()</code> and <code class=\"language-text\">add()</code> are working very similar according to the <a href=\"https://firebase.google.com/docs/firestore/manage-data/add-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firestore Documentation</a>.</p>\n</blockquote>\n<p>I prefer to use <code class=\"language-text\">set()</code> over <code class=\"language-text\">add()</code> because I can use a single method to addÂ or update data. ðŸ™‚</p>\n<h2>Update A Document Data to Cloud Firestore</h2>\n<p>There are two options to update existing data.</p>\n<ul>\n<li>set()</li>\n<li>update()</li>\n</ul>\n<p><strong>Overwriting A Document using set()</strong></p>\n<p>When you want to overwrite or completely replace an existing document, you can easily do that by using the<code class=\"language-text\">set()</code> method by passing an existing auto-generated document identifier as an argument to the <code class=\"language-text\">doc()</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Kim chuchu'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Overriding A Document using set() (BETTER)</strong></p>\n<p>There are some cases where you will need to just update (override) one or more fields rather than replacing the whole document.</p>\n<p>This can also be done by <code class=\"language-text\">set()</code> method as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> merge<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code is very similar to the previous one, with the only difference being it has a JavaScript object {merge: true} as a second argument to the <code class=\"language-text\">set()</code> method which will prevent overwriting an entire document.</p>\n<p>At this stage, the <code class=\"language-text\">set()</code> method will only update with new values to the targetted document if the <code class=\"language-text\">name</code> and <code class=\"language-text\">age</code> fields exist.</p>\n<p>Otherwise, the missing fields will be created.</p>\n<p><strong>Overriding A Document using update()</strong></p>\n<p>The <code class=\"language-text\">update()</code> method is very similar to <code class=\"language-text\">set()</code> without the second argument and is pretty straight forward.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'mishra.yashrajs@email.com'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You must provide an auto-generated ID as an argument to the <code class=\"language-text\">doc()</code> when using <code class=\"language-text\">update()</code> method to have it work.</p>\n<h2>Delete Document from Cloud Firestore</h2>\n<p><strong>Delete A Field From A Document on the Firestore Database</strong></p>\n<p>You can delete an entire document from Cloud Firestore using <code class=\"language-text\">delete()</code> method by passing its auto-generated ID as an argument to the <code class=\"language-text\">doc()</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Document successfully deleted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error removing document: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><em>One more thing I want to point out here is that sub-collections wonâ€™t be deleted when you delete the parent document.</em></p>\n</blockquote>\n<p><strong>Delete A Field From A Document on the Firestore Database</strong></p>\n<p>To delete a specific field from a document, use <code class=\"language-text\">update()</code> method and inside it add the field that you want to delete as a javascript object and set <strong>firebase.firestore.FieldValue.delete()</strong> as a value of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3P86VJxcpBK0D0lsAyYx\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nemail<span class=\"token punctuation\">.</span>firestore<span class=\"token punctuation\">.</span>FieldValue<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pretty straight forward.</p>\n<p>Before getting into retrieving data from the Firestore Database, letâ€™s add some data to the Firestore Database calling the following function once.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">addUsersToFirestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"xyz@email.com\"</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-06-16 12:08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"xyz@email.com\"</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-06-16 12:08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"xyz@email.com\"</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-06-16 12:08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If everything goes well, you should have a collection called <code class=\"language-text\">users</code> with five documents.</p>\n<h2>Get Documents Data from Firestore Database</h2>\n<p>There are a couple of options for how you can get or retrieve data from the Cloud Firestore Database.</p>\n<ul>\n<li><strong>get():</strong> This method will be invoked and get data only once until itâ€™s called again.</li>\n<li><strong>onSnapShot():</strong> Unlike <code class=\"language-text\">get()</code> method, this method will be triggered every time data changes in a location that itâ€™s listening for.</li>\n</ul>\n<p>In the code below, I use the <code class=\"language-text\">get()</code> method on the <code class=\"language-text\">users</code> collection reference to get all the documents data from it.</p>\n<p>It will return a promise, and if the promise is full-filled the <code class=\"language-text\">then()</code> function will be called and the callback function will have a snapshot object <code class=\"language-text\">snap</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">snap</code> object contains all the user documents from the <code class=\"language-text\">users</code> collection with some other meta information.</p>\n<p>You can get an individual document using <code class=\"language-text\">forEach()</code> by passing a callback function on each iteration.</p>\n<p>On each iteration, you will get value named <code class=\"language-text\">doc</code>, which is also a firebase query snapshot, that contains each user document with some additional metadata.</p>\n<p>Inside that loop, you can invoke <code class=\"language-text\">data()</code> method on the <code class=\"language-text\">doc</code> object to get an actual user document.</p>\n<p>Also, you can get the auto-id of a user using <code class=\"language-text\">id</code> property on the <code class=\"language-text\">doc</code> object.</p>\n<p>At this stage, if you make any changes on the users collection, you will have to refresh the page in order to see the change as the <code class=\"language-text\">get()</code> method will be called once.</p>\n<p>To see a real-time change on the view, you will need to use <strong>onSnapShot()</strong> listener<strong>.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the above code is almost identical to the previous one. The only change is replacing the <code class=\"language-text\">get()</code> to <code class=\"language-text\">onSnapShot()</code> method.</p>\n<p>Using the <strong>onSnapShot()</strong> listener method, it will update the view automatically when data changes on the Firestore Database which is cool! ðŸ˜Ž</p>\n<h2>Get A Single Document Data</h2>\n<p>To get a specific document, call <code class=\"language-text\">doc()</code> method by passing the auto-generated document ID to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cAwTiq7IYKAbFGnhgKT3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><em>Make sure that the <code class=\"language-text\">get()</code> method always gets run last.</em></p>\n</blockquote>\n<h2>Get Data from Sub-collection in Firestore</h2>\n<p>Sub-collections are a great way to structure your data.</p>\n<p>Firestore queries are shallow.</p>\n<p>So, when you query to get all the user documents form <code class=\"language-text\">users</code> collection, you wonâ€™t get any sub-collections underneath them.</p>\n<p>To get all documents from a sub-collection of a specific user, you can query like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cAwTiq7IYKAbFGnhgKT3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you want to get a specific document from a sub-collection of a specific user, the query should be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cAwTiq7IYKAbFGnhgKT3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BjLZHiuQfVQVOu9nEG7k'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>snap<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The one restriction here is that there is no way to retrieve all documents from the users collection as well as orders collection all at once. If youâ€™re trying to make a query like that, you might want to think about changing your data structure.</p>\n<h2>Firestore Single/Multiple Where Query Filter</h2>\n<p>Querying Firestore with the <code class=\"language-text\">where</code> clause is one of the most common ways to filter documents using query operators <code class=\"language-text\">== &lt;,</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">&gt;</code>, <code class=\"language-text\">&gt;=</code>, etc.</p>\n<p>Letâ€™s see how to make a query with a single where clause.</p>\n<p>For example, if I want to get users where their age is equal to or less than 30, my query will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the <code class=\"language-text\">where()</code> method takes three arguments which are a <strong>field name</strong>, relational <strong>operator</strong> and the <strong>value</strong> that you want to compare against to the field name. These arguments look very similar to an if condition block.</p>\n<p>Now, letâ€™s make a query with multiple where clauses.</p>\n<p>For that, I want documents where the age is less than or equal to 30 but greater than or equal to 20.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sometimes, you will need to create a composite index to get the query working.</p>\n<p>Letâ€™s say you want to get the documents from users collection where each user age is greater than or equal to 20 and gender is equal to female.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'=='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fmale'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When you use <strong>equal</strong> <strong>operator</strong> and <strong>range</strong> <strong>operator</strong> in a single query, you will need to create a composite index.</p>\n<p>The quickest way to create an index for this query is to go to the debug area on the browser and click the link that is provided by Firebase.</p>\n<p>It will take you to your Firebase Console Dashboard -> Database -> Create A Composite Index.</p>\n<p>And click Create Index.</p>\n<p>This will take several minutes to complete the enabling process.</p>\n<p>Once itâ€™s done âœ…, you should be able to see that the composite index is enabled by going to Firebase Console Dashboard -> Database -> Indexes Tab</p>\n<h2>OrderBy and Limit FiltersÂ </h2>\n<p>Letâ€™s take a look at <code class=\"language-text\">orderBy()</code> method which takes two arguments, the first one is a field name, the second one is optional and it defaults to ascending order (asc).</p>\n<p>Letâ€™s combine <code class=\"language-text\">where</code> and<code class=\"language-text\">orderBy()</code> by retrieving documents where age is greater than or equal to 20 and organize documents in descending order by <code class=\"language-text\">age</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nice!</p>\n<p>Letâ€™s add one more query filter called <code class=\"language-text\">limit()</code>.</p>\n<p>By using the <code class=\"language-text\">limit()</code> method, you can restrict the number of documents count by passing an integer value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Collection Group Queries</h2>\n<p>Collection Group Queries allow you to query data from different sub-collections that share the same name across the Firestore Database. Itâ€™s a new feature at the time the post was released at the <a href=\"https://www.youtube.com/watch?v=lW7DWV2jST0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google I/O Conference 2019</a>.</p>\n<p>As I have shown earlier, I have a collection called <code class=\"language-text\">users</code> which have sub-collections called <code class=\"language-text\">posts</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">users <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span> userID <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span> posts <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span> postID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Letâ€™s say I want to get all the documents that were published in 2018 from posts sub-collections across the Firestore Database.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collectionGroup</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'publishedAt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-01-01 00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'publishedAt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-12-31 23:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sub-collections that share the same name can be targeted using <code class=\"language-text\">collectionGroup()</code> instead of <code class=\"language-text\">collection()</code>.</p>\n<p>When you want to compare two dates, you will need to use <code class=\"language-text\">new Date()</code> and pass the <code class=\"language-text\">date</code> that you want to check against the <code class=\"language-text\">publishedAt</code> on the <code class=\"language-text\">posts</code> sub-collection.</p>\n<p>If you get a <code class=\"language-text\">Missing or Insufficient Permission</code> error on the browser / app debug console when you run the collection group query, the security rules need to be changed.</p>\n<p>To change the Security Rules, Go to <strong>Firebase Console</strong> â†’ <strong>Databaseâ†’</strong> <strong>Rules</strong> Tab and add the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">service cloud<span class=\"token punctuation\">.</span>firestore <span class=\"token punctuation\">{</span>\n match <span class=\"token operator\">/</span>databases<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>database<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>documents <span class=\"token punctuation\">{</span>\n    match <span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>document<span class=\"token operator\">=</span><span class=\"token operator\">**</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n   allow read<span class=\"token punctuation\">,</span> write<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding this code will allow users to read or write data to the Firestore database.</p>\n<blockquote>\n<p><em>For demo purposes, I am allowing anyone to read or write data to the Firestore Database, but itâ€™s not recommended. In a real-world scenario, you would have security rules targeting each collection or sub-collection to have different permissions based on your application behaviour.</em></p>\n</blockquote>\n<p>Letâ€™s run the collection group query one more time.</p>\n<p>And, you will get another error on the browser/app debug console saying that the query requires a composite index.</p>\n<p>This can be easily fixed by clicking the link provided by Firebase on the Debug console, which will then take you to the Firebase Dashboard Database Page.</p>\n<p>Several minutes after, the composite index has been enabled.</p>\n<p>Go back and try running the code one last time, and you will be able to see the results on the debug console.</p>\n<p>Nice!</p>\n<h2>Firestore Pagination Queries using Query Cursors</h2>\n<p>Imagine, you have a huge collection of documents about cities. Itâ€™s obvious to split them into batches (pagination) using query cursor methods so that users can have more control on the data consumption.</p>\n<p>This will prevent users from getting overcharged for their data plans. As a developer, Firebase will bill you based on the number of document reads.</p>\n<p>Letâ€™ see how to paginate the cities collection, showing the first 10 items when the next button is pressed, then the next 10, and so on as shown below.</p>\n<p>There are only four query cursor functions. These functions will work with <code class=\"language-text\">orderBy()</code> by passing the document field that you want to paginate based off of.</p>\n<ul>\n<li><strong>startAt():</strong> You can pass any field value from documents which will be the starting point of your query including that field value.</li>\n<li><strong>startAfter()</strong>: This is very similar to the startAt() with the only difference being the value that you passed inside startAfter() is excluded in the result dataset.</li>\n<li><strong>endAt():</strong> You can pass any field value from documents which will be the ending point of your query including that field value.</li>\n<li><strong>endAfter()</strong>: This is very similar to the endAt() and the only difference is the value that you passed inside endAfter() is excluded in the result dataset.</li>\n</ul>\n<p>First, I am going to create three global variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cityRef <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cities'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lastVisibleCitySnapShot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, declare and invoke a function called<code class=\"language-text\">getFirstTenCities()</code> which will get the first 10 cities from the Firestore Database.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityRef<span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot <span class=\"token operator\">=</span> snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">[</span>snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The initial query ordered by <code class=\"language-text\">city</code> field and <code class=\"language-text\">limit</code> to 10 items. Then, loop through the <code class=\"language-text\">snap</code> object that you receive from the call back function.</p>\n<p>Append each city document to the <code class=\"language-text\">cities</code> global array that I declared earlier. After that, you can easily loop through the <code class=\"language-text\">cities</code> array in your HTML.</p>\n<p>Finally, get the last document from the <code class=\"language-text\">snap</code> object using <code class=\"language-text\">snap.docs</code> array and assign it to <code class=\"language-text\">lastVisibleCitySnapShot</code> global variable.</p>\n<p>I can get the next 10 items starting after the last city document stored in the <code class=\"language-text\">lastVisibleCitySnapShot.</code></p>\n<p>After that, add two simple next and previous buttons in your HTML and give a click event to them.</p>\n<p>When a user clicks the next or next button, it invokes a function called <code class=\"language-text\">next()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityRef\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startAfter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot <span class=\"token operator\">=</span> snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">[</span>snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to keep adding data to the cities array, keep scrolling down to see more data, you do not have reset it to an empty array [].</p>\n<p>In my case, I want to reset it so that I can replace it with 10 new items. In the query, <code class=\"language-text\">startAfter()</code> method is used by passing the <code class=\"language-text\">lastVisibleCitySnapshot</code>. This will make sure to get only the next 10 items.</p>\n<p>Similar to <code class=\"language-text\">next()</code> method, here is the <code class=\"language-text\">prev()</code> one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityRef\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">endBefore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot <span class=\"token operator\">=</span> snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">[</span>snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>There you go.</p>\n<h2>Conclusion</h2>\n<p>You have learned how to do a simple CRUD operation type queries in Firestore. I have shown you how to filter data using WHERE, ORDERBY and LIMIT.</p>\n<p>I have also taught you how to use Collection Group Queries and Pagination using Query Cursor Functions.</p>\n<p>Now, I have a question for youâ€¦</p>\n<p>What other queries would you like to know about which is not covered here?</p>\n<p>Let me know in the comments section below so that I can add it here.</p>","frontmatter":{"title":"Get to know ðŸ”¥Firebase","description":"Have you ever wanted to make a simple web app?","date":"2020-06-16","slug":"/pensieve/get-to-know-firebase","tags":["firebase","database","web development"]}}},"pageContext":{}}}