{"componentChunkName":"component---src-pages-pensieve-index-js","path":"/pensieve/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"/Uses","description":"Things that I use for development","slug":"/uses","date":"2020-06-23","tags":["Uses","My stack"],"draft":false},"html":"<h2>Hardware</h2>\n<ul>\n<li><strong>Laptop</strong> - Lenovo ideapad 540 >> <strong>Lenovo Legion Y540</strong></li>\n<li><strong>Phone</strong> - <strong>Black Shark 2</strong></li>\n<li><strong>Mouse</strong> - Logitech G300s >> <strong>Logitech G402 Hyperon Fury</strong></li>\n<li><strong>Keyboard</strong> - <strong>HAVIT RGB Mechanical Keyboard</strong></li>\n<li><strong>Backpack</strong> - <strong>Lenovo Y Gaming Armored Backpack</strong></li>\n</ul>\n<h2>Software</h2>\n<h3>Package Managers</h3>\n<blockquote>\n<h4>Choco</h4>\n<blockquote>\n<h5><a href=\"https://classic.yarnpkg.com/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn (its fast and looks sexy)</a></h5>\n<blockquote>\n<ul>\n<li>netlify-cli</li>\n</ul>\n</blockquote>\n<h5><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM (universal)</a></h5>\n<blockquote>\n<ul>\n<li>firebase-tools</li>\n<li>gatsby-cli</li>\n<li>gulp-cli</li>\n<li>live-server</li>\n<li>ngrok</li>\n<li>node-red</li>\n<li>nodemon</li>\n<li>now (Vercel)</li>\n<li>pkg</li>\n<li>prettier</li>\n<li>sass</li>\n<li>typescript</li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3>Design tools</h3>\n<blockquote>\n<ul>\n<li><a href=\"https://www.figma.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Figma</a></li>\n<li><a href=\"https://www.adobe.com/in/products/xd.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Adobe XD</a></li>\n<li><a href=\"https://www.invisionapp.com/studio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">InVision Studio</a></li>\n</ul>\n</blockquote>\n<h3>Browser</h3>\n<blockquote>\n<ul>\n<li>Edge (chromium one)</li>\n<li>Firefox Developer (Better UI development)</li>\n</ul>\n</blockquote>\n<h3>Code Editor OR IDE</h3>\n<blockquote>\n<h4>VS Code</h4>\n<p><strong>These are my vs code plugins and Settings can be found <a href=\"https://gist.github.com/yashrajmishra/62f90b2c6107da2fe4c54a1a525b1bdc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HERE</a></strong></p>\n<blockquote>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Better Comments</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bracket Pair Colorizer 2</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TODO Highlight</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prettier - Code formatter</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Material Icon Theme</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">markdownlint</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Markdown Preview Enhanced</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Live Share</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Live Server</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">indent-rainbow</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=brittanychiang.halcyon-vscode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Halcyon Theme</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=hasanakg.firebase-snippets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firebase Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio IntelliCode</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TSLint</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=docsmsft.docs-preview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs-preview</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=docsmsft.docs-authoring-pack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docs Authoring Pack</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES7 React/Redux/GraphQL/React-Native snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draw.io Integration</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DotENV</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=docsmsft.docs-markdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs-markdown</a></li>\n</ul>\n</blockquote>\n<h4>IntelliJ IDEA</h4>\n<h4>Clion</h4>\n<h4>Web Storm</h4>\n</blockquote>\n<h3>Terminals</h3>\n<blockquote>\n<ul>\n<li><a href=\"https://hyper.is/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hyper</a></li>\n<li><a href=\"https://github.com/microsoft/terminal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Windows Terminal</a></li>\n</ul>\n</blockquote>\n<h3>Go to Fonts</h3>\n<blockquote>\n<ul>\n<li><a href=\"https://www.jetbrains.com/lp/mono/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jetbrains Mono</a> # my current editor font</li>\n<li><a href=\"https://rsms.me/inter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inter</a></li>\n<li><a href=\"https://dank.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dank Mono</a></li>\n<li><a href=\"https://github.com/tonsky/FiraCode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fira Code</a> # Appreciate this font</li>\n</ul>\n</blockquote>\n<h3>Other Software</h3>\n<ul>\n<li><a href=\"https://github.com/Toinane/colorpicker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Color Picker</a></li>\n<li><a href=\"https://www.autodesk.in/products/fusion-360/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fusion 360</a></li>\n<li><a href=\"https://ultimaker.com/software/ultimaker-cura\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ultimaker Cura</a></li>\n<li><a href=\"https://www.adobe.com/in/products/illustrator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Illustrator</a></li>\n<li><a href=\"https://www.adobe.com/in/products/photoshop.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Photoshop</a></li>\n<li><a href=\"https://www.gitkraken.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git Kraken</a></li>\n<li><a href=\"https://www.7-zip.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">7-Zip</a></li>\n<li><a href=\"https://discord.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discord</a></li>\n<li><a href=\"https://www.notion.so/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Notion</a></li>\n<li><a href=\"https://runjs.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RunJs</a></li>\n<li><a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman</a></li>\n<li><a href=\"https://insomnia.rest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Insomnia</a></li>\n</ul>\n<h3>Games I play</h3>\n<ul>\n<li><a href=\"https://store.steampowered.com/app/730/CounterStrike_Global_Offensive/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CS GO</a></li>\n<li><a href=\"https://www.rockstargames.com/V/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GTA V</a></li>\n<li><a href=\"https://www.ea.com/games/apex-legends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apex Legend</a></li>\n<li><a href=\"https://www.callofduty.com/warzone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">COD:Warzone</a></li>\n<li><a href=\"https://playvalorant.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Valorent</a></li>\n</ul>\n<h3>Some Cool Websites</h3>\n<ul>\n<li><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Devhints.io</a></li>\n<li><a href=\"https://sitechecker.pro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Site Checker</a></li>\n<li><a href=\"https://convertingcolors.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Converting Colors</a> - What a great Color</li>\n<li><a href=\"https://webgradients.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Gradient</a></li>\n<li><a href=\"https://spectrum.chat/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spectrum</a> - A nice Community Platform</li>\n<li><a href=\"https://obsproject.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Broadcaster Software</a></li>\n<li><a href=\"https://github.com/hovancik/stretchly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stretchly</a> - take care of yourself</li>\n</ul>"}},{"node":{"frontmatter":{"title":"Get to know 🔥Firebase","description":"Have you ever wanted to make a simple web app?","slug":"/pensieve/get-to-know-firebase","date":"2020-06-16","tags":["firebase","database","web development"],"draft":false},"html":"<p>Have you ever wanted to make a simple web app? Well, if you have, you will probably be aware of the fact that an app has normally a back-end which includes the logic and integration with a database, and a front-end which helps the user interact with our application.</p>\n<p>So, returning to the previous question, If you want a simple app in which requires a small database and some users, Is there a need for a full back-end system? Well no, actually there is a really cool service from Google called Firebase which gives you a pretty good database and</p>\n<p><strong><em>I am going to teach you the following basics of 🔥 Firebase Cloud Firestore :-</em></strong></p>\n<ol>\n<li>Add/Create A Document To Cloud Firestore</li>\n<li>Update A Document Data to Cloud Firestore</li>\n<li>Delete Document from Cloud Firestore</li>\n<li>Get Documents Data from Firestore Database</li>\n<li>Get A Single Document Data</li>\n<li>Get Data from Sub-collection in Firestore</li>\n<li>Firestore Single/Multiple Where Query Filter</li>\n<li>OrderBy and Limit Filters</li>\n<li>Collection Group Queries</li>\n<li>Firestore Pagination Queries using Query Cursors</li>\n<li>Conclusion</li>\n</ol>\n<h2>Add/Create A Document To Cloud Firestore</h2>\n<p>There are two ways to create/add a new document to the Cloud Firestore, which are:</p>\n<ul>\n<li>add()</li>\n<li>set()</li>\n</ul>\n<p>Let’s take a look at <code class=\"language-text\">add()</code> method sample code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'mishra.yashrajs@email.com'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><em>To run the sample code in your project, you will need to <a href=\"https://firebase.google.com/docs/web/setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">add Firebase to your project</a>.</em></p>\n</blockquote>\n<p>First, get a reference to the Firestore database using <code class=\"language-text\">firestore()</code> method and store it in <code class=\"language-text\">db</code>.</p>\n<p>Then, obtain a reference to the users collection by invoking <code class=\"language-text\">collection()</code> method on the <code class=\"language-text\">db</code> object.</p>\n<p>Finally, run <code class=\"language-text\">add()</code> method by passing new data as a JavaScript object.</p>\n<p>That’s it.</p>\n<p>Let’s take a look at <code class=\"language-text\">set()</code> method.</p>\n<p>As you can see below, the <code class=\"language-text\">set()</code> method is very similar to <code class=\"language-text\">add()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'mishra.yashrajs@email.com'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The only difference is that you can add a document to a collection directly using <code class=\"language-text\">add()</code>method, but for the <code class=\"language-text\">set()</code> method you need to explicitly specify the document identifier by invoking <code class=\"language-text\">doc().</code></p>\n<p>If you do not specify a document identifier, it will be created.</p>\n<blockquote>\n<p>Under the hood, both <code class=\"language-text\">set()</code> and <code class=\"language-text\">add()</code> are working very similar according to the <a href=\"https://firebase.google.com/docs/firestore/manage-data/add-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firestore Documentation</a>.</p>\n</blockquote>\n<p>I prefer to use <code class=\"language-text\">set()</code> over <code class=\"language-text\">add()</code> because I can use a single method to add or update data. 🙂</p>\n<h2>Update A Document Data to Cloud Firestore</h2>\n<p>There are two options to update existing data.</p>\n<ul>\n<li>set()</li>\n<li>update()</li>\n</ul>\n<p><strong>Overwriting A Document using set()</strong></p>\n<p>When you want to overwrite or completely replace an existing document, you can easily do that by using the<code class=\"language-text\">set()</code> method by passing an existing auto-generated document identifier as an argument to the <code class=\"language-text\">doc()</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Kim chuchu'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Overriding A Document using set() (BETTER)</strong></p>\n<p>There are some cases where you will need to just update (override) one or more fields rather than replacing the whole document.</p>\n<p>This can also be done by <code class=\"language-text\">set()</code> method as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> merge<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The above code is very similar to the previous one, with the only difference being it has a JavaScript object {merge: true} as a second argument to the <code class=\"language-text\">set()</code> method which will prevent overwriting an entire document.</p>\n<p>At this stage, the <code class=\"language-text\">set()</code> method will only update with new values to the targetted document if the <code class=\"language-text\">name</code> and <code class=\"language-text\">age</code> fields exist.</p>\n<p>Otherwise, the missing fields will be created.</p>\n<p><strong>Overriding A Document using update()</strong></p>\n<p>The <code class=\"language-text\">update()</code> method is very similar to <code class=\"language-text\">set()</code> without the second argument and is pretty straight forward.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yashraj Mishra'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'mishra.yashrajs@email.com'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You must provide an auto-generated ID as an argument to the <code class=\"language-text\">doc()</code> when using <code class=\"language-text\">update()</code> method to have it work.</p>\n<h2>Delete Document from Cloud Firestore</h2>\n<p><strong>Delete A Field From A Document on the Firestore Database</strong></p>\n<p>You can delete an entire document from Cloud Firestore using <code class=\"language-text\">delete()</code> method by passing its auto-generated ID as an argument to the <code class=\"language-text\">doc()</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3P86VJxcpBK0D0lsAyYx'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Document successfully deleted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error removing document: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><em>One more thing I want to point out here is that sub-collections won’t be deleted when you delete the parent document.</em></p>\n</blockquote>\n<p><strong>Delete A Field From A Document on the Firestore Database</strong></p>\n<p>To delete a specific field from a document, use <code class=\"language-text\">update()</code> method and inside it add the field that you want to delete as a javascript object and set <strong>firebase.firestore.FieldValue.delete()</strong> as a value of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3P86VJxcpBK0D0lsAyYx\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nemail<span class=\"token punctuation\">.</span>firestore<span class=\"token punctuation\">.</span>FieldValue<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pretty straight forward.</p>\n<p>Before getting into retrieving data from the Firestore Database, let’s add some data to the Firestore Database calling the following function once.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">addUsersToFirestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"xyz@email.com\"</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-06-16 12:08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"xyz@email.com\"</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-06-16 12:08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">\"xyz@email.com\"</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-06-16 12:08:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If everything goes well, you should have a collection called <code class=\"language-text\">users</code> with five documents.</p>\n<h2>Get Documents Data from Firestore Database</h2>\n<p>There are a couple of options for how you can get or retrieve data from the Cloud Firestore Database.</p>\n<ul>\n<li><strong>get():</strong> This method will be invoked and get data only once until it’s called again.</li>\n<li><strong>onSnapShot():</strong> Unlike <code class=\"language-text\">get()</code> method, this method will be triggered every time data changes in a location that it’s listening for.</li>\n</ul>\n<p>In the code below, I use the <code class=\"language-text\">get()</code> method on the <code class=\"language-text\">users</code> collection reference to get all the documents data from it.</p>\n<p>It will return a promise, and if the promise is full-filled the <code class=\"language-text\">then()</code> function will be called and the callback function will have a snapshot object <code class=\"language-text\">snap</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">snap</code> object contains all the user documents from the <code class=\"language-text\">users</code> collection with some other meta information.</p>\n<p>You can get an individual document using <code class=\"language-text\">forEach()</code> by passing a callback function on each iteration.</p>\n<p>On each iteration, you will get value named <code class=\"language-text\">doc</code>, which is also a firebase query snapshot, that contains each user document with some additional metadata.</p>\n<p>Inside that loop, you can invoke <code class=\"language-text\">data()</code> method on the <code class=\"language-text\">doc</code> object to get an actual user document.</p>\n<p>Also, you can get the auto-id of a user using <code class=\"language-text\">id</code> property on the <code class=\"language-text\">doc</code> object.</p>\n<p>At this stage, if you make any changes on the users collection, you will have to refresh the page in order to see the change as the <code class=\"language-text\">get()</code> method will be called once.</p>\n<p>To see a real-time change on the view, you will need to use <strong>onSnapShot()</strong> listener<strong>.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the above code is almost identical to the previous one. The only change is replacing the <code class=\"language-text\">get()</code> to <code class=\"language-text\">onSnapShot()</code> method.</p>\n<p>Using the <strong>onSnapShot()</strong> listener method, it will update the view automatically when data changes on the Firestore Database which is cool! 😎</p>\n<h2>Get A Single Document Data</h2>\n<p>To get a specific document, call <code class=\"language-text\">doc()</code> method by passing the auto-generated document ID to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cAwTiq7IYKAbFGnhgKT3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><em>Make sure that the <code class=\"language-text\">get()</code> method always gets run last.</em></p>\n</blockquote>\n<h2>Get Data from Sub-collection in Firestore</h2>\n<p>Sub-collections are a great way to structure your data.</p>\n<p>Firestore queries are shallow.</p>\n<p>So, when you query to get all the user documents form <code class=\"language-text\">users</code> collection, you won’t get any sub-collections underneath them.</p>\n<p>To get all documents from a sub-collection of a specific user, you can query like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cAwTiq7IYKAbFGnhgKT3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you want to get a specific document from a sub-collection of a specific user, the query should be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cAwTiq7IYKAbFGnhgKT3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BjLZHiuQfVQVOu9nEG7k'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>snap<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The one restriction here is that there is no way to retrieve all documents from the users collection as well as orders collection all at once. If you’re trying to make a query like that, you might want to think about changing your data structure.</p>\n<h2>Firestore Single/Multiple Where Query Filter</h2>\n<p>Querying Firestore with the <code class=\"language-text\">where</code> clause is one of the most common ways to filter documents using query operators <code class=\"language-text\">== &lt;,</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">&gt;</code>, <code class=\"language-text\">&gt;=</code>, etc.</p>\n<p>Let’s see how to make a query with a single where clause.</p>\n<p>For example, if I want to get users where their age is equal to or less than 30, my query will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the <code class=\"language-text\">where()</code> method takes three arguments which are a <strong>field name</strong>, relational <strong>operator</strong> and the <strong>value</strong> that you want to compare against to the field name. These arguments look very similar to an if condition block.</p>\n<p>Now, let’s make a query with multiple where clauses.</p>\n<p>For that, I want documents where the age is less than or equal to 30 but greater than or equal to 20.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sometimes, you will need to create a composite index to get the query working.</p>\n<p>Let’s say you want to get the documents from users collection where each user age is greater than or equal to 20 and gender is equal to female.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'=='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fmale'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When you use <strong>equal</strong> <strong>operator</strong> and <strong>range</strong> <strong>operator</strong> in a single query, you will need to create a composite index.</p>\n<p>The quickest way to create an index for this query is to go to the debug area on the browser and click the link that is provided by Firebase.</p>\n<p>It will take you to your Firebase Console Dashboard -> Database -> Create A Composite Index.</p>\n<p>And click Create Index.</p>\n<p>This will take several minutes to complete the enabling process.</p>\n<p>Once it’s done ✅, you should be able to see that the composite index is enabled by going to Firebase Console Dashboard -> Database -> Indexes Tab</p>\n<h2>OrderBy and Limit Filters </h2>\n<p>Let’s take a look at <code class=\"language-text\">orderBy()</code> method which takes two arguments, the first one is a field name, the second one is optional and it defaults to ascending order (asc).</p>\n<p>Let’s combine <code class=\"language-text\">where</code> and<code class=\"language-text\">orderBy()</code> by retrieving documents where age is greater than or equal to 20 and organize documents in descending order by <code class=\"language-text\">age</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nice!</p>\n<p>Let’s add one more query filter called <code class=\"language-text\">limit()</code>.</p>\n<p>By using the <code class=\"language-text\">limit()</code> method, you can restrict the number of documents count by passing an integer value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Collection Group Queries</h2>\n<p>Collection Group Queries allow you to query data from different sub-collections that share the same name across the Firestore Database. It’s a new feature at the time the post was released at the <a href=\"https://www.youtube.com/watch?v=lW7DWV2jST0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google I/O Conference 2019</a>.</p>\n<p>As I have shown earlier, I have a collection called <code class=\"language-text\">users</code> which have sub-collections called <code class=\"language-text\">posts</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">users <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span> userID <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span> posts <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span> postID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let’s say I want to get all the documents that were published in 2018 from posts sub-collections across the Firestore Database.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collectionGroup</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'publishedAt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>='</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-01-01 00:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'publishedAt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-12-31 23:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sub-collections that share the same name can be targeted using <code class=\"language-text\">collectionGroup()</code> instead of <code class=\"language-text\">collection()</code>.</p>\n<p>When you want to compare two dates, you will need to use <code class=\"language-text\">new Date()</code> and pass the <code class=\"language-text\">date</code> that you want to check against the <code class=\"language-text\">publishedAt</code> on the <code class=\"language-text\">posts</code> sub-collection.</p>\n<p>If you get a <code class=\"language-text\">Missing or Insufficient Permission</code> error on the browser / app debug console when you run the collection group query, the security rules need to be changed.</p>\n<p>To change the Security Rules, Go to <strong>Firebase Console</strong> → <strong>Database→</strong> <strong>Rules</strong> Tab and add the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">service cloud<span class=\"token punctuation\">.</span>firestore <span class=\"token punctuation\">{</span>\n match <span class=\"token operator\">/</span>databases<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>database<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>documents <span class=\"token punctuation\">{</span>\n    match <span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>document<span class=\"token operator\">=</span><span class=\"token operator\">**</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n   allow read<span class=\"token punctuation\">,</span> write<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding this code will allow users to read or write data to the Firestore database.</p>\n<blockquote>\n<p><em>For demo purposes, I am allowing anyone to read or write data to the Firestore Database, but it’s not recommended. In a real-world scenario, you would have security rules targeting each collection or sub-collection to have different permissions based on your application behaviour.</em></p>\n</blockquote>\n<p>Let’s run the collection group query one more time.</p>\n<p>And, you will get another error on the browser/app debug console saying that the query requires a composite index.</p>\n<p>This can be easily fixed by clicking the link provided by Firebase on the Debug console, which will then take you to the Firebase Dashboard Database Page.</p>\n<p>Several minutes after, the composite index has been enabled.</p>\n<p>Go back and try running the code one last time, and you will be able to see the results on the debug console.</p>\n<p>Nice!</p>\n<h2>Firestore Pagination Queries using Query Cursors</h2>\n<p>Imagine, you have a huge collection of documents about cities. It’s obvious to split them into batches (pagination) using query cursor methods so that users can have more control on the data consumption.</p>\n<p>This will prevent users from getting overcharged for their data plans. As a developer, Firebase will bill you based on the number of document reads.</p>\n<p>Let’ see how to paginate the cities collection, showing the first 10 items when the next button is pressed, then the next 10, and so on as shown below.</p>\n<p>There are only four query cursor functions. These functions will work with <code class=\"language-text\">orderBy()</code> by passing the document field that you want to paginate based off of.</p>\n<ul>\n<li><strong>startAt():</strong> You can pass any field value from documents which will be the starting point of your query including that field value.</li>\n<li><strong>startAfter()</strong>: This is very similar to the startAt() with the only difference being the value that you passed inside startAfter() is excluded in the result dataset.</li>\n<li><strong>endAt():</strong> You can pass any field value from documents which will be the ending point of your query including that field value.</li>\n<li><strong>endAfter()</strong>: This is very similar to the endAt() and the only difference is the value that you passed inside endAfter() is excluded in the result dataset.</li>\n</ul>\n<p>First, I am going to create three global variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cityRef <span class=\"token operator\">=</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cities'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lastVisibleCitySnapShot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, declare and invoke a function called<code class=\"language-text\">getFirstTenCities()</code> which will get the first 10 cities from the Firestore Database.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityRef<span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot <span class=\"token operator\">=</span> snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">[</span>snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The initial query ordered by <code class=\"language-text\">city</code> field and <code class=\"language-text\">limit</code> to 10 items. Then, loop through the <code class=\"language-text\">snap</code> object that you receive from the call back function.</p>\n<p>Append each city document to the <code class=\"language-text\">cities</code> global array that I declared earlier. After that, you can easily loop through the <code class=\"language-text\">cities</code> array in your HTML.</p>\n<p>Finally, get the last document from the <code class=\"language-text\">snap</code> object using <code class=\"language-text\">snap.docs</code> array and assign it to <code class=\"language-text\">lastVisibleCitySnapShot</code> global variable.</p>\n<p>I can get the next 10 items starting after the last city document stored in the <code class=\"language-text\">lastVisibleCitySnapShot.</code></p>\n<p>After that, add two simple next and previous buttons in your HTML and give a click event to them.</p>\n<p>When a user clicks the next or next button, it invokes a function called <code class=\"language-text\">next()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityRef\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startAfter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot <span class=\"token operator\">=</span> snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">[</span>snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to keep adding data to the cities array, keep scrolling down to see more data, you do not have reset it to an empty array [].</p>\n<p>In my case, I want to reset it so that I can replace it with 10 new items. In the query, <code class=\"language-text\">startAfter()</code> method is used by passing the <code class=\"language-text\">lastVisibleCitySnapshot</code>. This will make sure to get only the next 10 items.</p>\n<p>Similar to <code class=\"language-text\">next()</code> method, here is the <code class=\"language-text\">prev()</code> one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityRef\n    <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">endBefore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snap</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastVisibleCitySnapShot <span class=\"token operator\">=</span> snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">[</span>snap<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>There you go.</p>\n<h2>Conclusion</h2>\n<p>You have learned how to do a simple CRUD operation type queries in Firestore. I have shown you how to filter data using WHERE, ORDERBY and LIMIT.</p>\n<p>I have also taught you how to use Collection Group Queries and Pagination using Query Cursor Functions.</p>\n<p>Now, I have a question for you…</p>\n<p>What other queries would you like to know about which is not covered here?</p>\n<p>Let me know in the comments section below so that I can add it here.</p>"}},{"node":{"frontmatter":{"title":"The reality of CSE in Private colleges of India","description":"The technical education system of CSE in private colleges is very bad","slug":"/pensieve/reality","date":"2020-04-12","tags":["deepdive🤿","talk"],"draft":false},"html":"<h2> Introduction</h2>\n<p>The technical education system of CSE in private colleges is very bad. The colleges have opened just to run a business. They are not creating actual Computer Science Engineers. Majority of students end up getting placed in Service based jobs which stops their mental growth. These students do not get jobs CSE students deserve.</p>\n<p>Now this problem has been prevailing since a long time now. Situation may have changed a bit but leaving it as is and hoping for better tomorrow will take a lot of time. Just think about the massive intake of these colleges. They do not give true Engineers as output. Many people have talked about this problem earlier. Some may have even taken actions to overcome this problem. But due to the massive scale and lot of authorities involved, solving this at once is rather impossible or time consuming.</p>\n<p>What we can do is, take small initiatives to solve this problem. We have come up with a solution. But first we have to get into the context of this problem. We'll be sharing the solution at the end.</p>\n<h2>Deeper dive</h2>\n<p>Let's start with a quick fact that the founders of most of the tech giants today had an amazing CS environment around them. Larry Page, Sergey Brin, Bill Gates are some examples. In fact, some of their parents were CS professors. In short, the environment plays a major role in deciding the career of a student. In India, students of Tier 1 &#x26; 2 colleges have a strong Alumni background, support from Seniors, Quality education, experienced faculties all of which help students find their career path in CS. Whether it be landing in their dream job or becoming an entrepreneur. They have a great coding ecosystem and properly functioning communities that lay a foundation of true Engineers for the society. Students give JEE (or any other Engineering entrance exam) to get into good colleges. Those who excel get into IITs or other prestigious institutes. These institutes are established ones, they have experienced faculties, good industrial connections and Alumni pursuing careers in CS.</p>\n<p>But this is just the tip of the iceberg. Consider this analogy : Do you know how many taxpayers are there in our country who play a major role in running this country? Roughly half of the population earns and among them 32% pays tax. Or 16% of the population pays tax. Similarly, only 10% of total CSE graduates are fit for coding jobs. What about the rest? Due to an unfit environment and hence huge demand-supply gap, 90% of these graduates were not able to explore CS in it's best form. They could have become potential problem solvers. These students could have become real engineers, job creators and not job seekers. Sadly, this didn't happen.</p>\n<h3>Expectations from Engineering education</h3>\n<p>The aim was to create problem solvers, researchers, entrepreneurs and skillful youth who would rather be job creators. They must have been able to apply their skills to solve modern problems. Engineering was always all about solving problems! They must have been aware of industry demands and new technologies and how to apply them. And most important of all they must be able to code. The number of unemployable and unskilled Engineers would have been negligible.</p>\n<h3>Root cause of this problem</h3>\n<p>Most of the colleges lie below 2nd Tier. Here the situation is completely different. These colleges fail at nurturing true Engineering talent. Problem Solving attitude has not been imparted yet. There is no coding culture, no community, no CS alumni, no seniors are there to guide. Infact faculties don't have coding experience.</p>\n<p>To pursue a career in CS, one need not master PCM (Physics, Chemistry &#x26; Mathematics). But those who fail to crack JEE (Joint Entrance Examination - Entrance exam for Engineering colleges) then join private colleges that lack a productive environment where they can enhance their CS skills. Even they don't get to know the big picture of CS. They just follow the Hit &#x26; Trial method to explore CS. This often leads to stress, insecurity and regret of choosing CS. Many even sacrifice their life for the same. So, this problem needs to be solved.</p>\n<p>Students mistake B. Tech CSE with BCA. The placements offered in the end are of service oriented jobs which have no correlation with Engineering or what was in the curriculum. Due to this bad environment, students fail at gaining development, coding and problem solving skills. They often get on a wrong track due to lack of guidance.</p>\n<h2>Why Solve this problem ?</h2>\n<p>Benefits of solving this problem :</p>\n<ul>\n<li>Maximum number of employable and skillful CS Engineers will be nurtured</li>\n<li>Due to strong CS foundation, students will be able to work on strong and successful technical startups. Hence, boosting Indian economy</li>\n<li>Students will get what they deserve</li>\n<li>Many suicides due to regret of choosing CSE can be stopped</li>\n<li>The money earned by hard-work of several parents will not go wasted</li>\n</ul>\n<p>This problem occurred in its first place due to colleges below 2nd tier not paying attention towards Product based company placements. They take fees of B. Tech and prepare them for BCA jobs. Many parents' hard-work is getting into the wrong hands. So, this is a crime that needs to be stopped.</p>\n<h2>The Solution</h2>\n<p>Below are some role wise customised initiatives one can take to solve this problem</p>\n<h3>Technology experts (GDE, MVP, employees, industry leaders)</h3>\n<p>As you are an expert in some domain, you must be having your inspiring story worth sharing. You can work along with the Developer relation team to conduct in-person boot camps for such students where problem solving is taught first, with the help of examples. Specifically curated study material can be created for these students.</p>\n<p>Note that this has to be done just once. Once a community is built and we have true leaders, this problem will then be solved in an exponential manner. Just a spark is needed.</p>\n<h3>Developer Relation teams</h3>\n<p>The following is intended for people responsible for monitoring developer relation programs like DSC, GDG, GDE, MSP, etc. We understand and appreciate the efforts of tech giants to start such amazing programs. As you know, the aim of these programs was to promote problem solving attitude, community building, helping each other and sharing knowledge. They were intended to bridge the gap between theory and practical. But the catch here is that colleges where these programs are just started, often fail at understanding these programs in the first place. They fail at community building. Let me give an example of my own college, where DSC started just to organize events, briefing about tech and not mastering them. Students don't sit together to solve challenging problems nearby. Not only this, they even think that merely collecting course completion certificates and incentives will help them improve their CV. Also, people often misuse incentives for trading. We have seen students developing useless Google Actions just to get a Google Home. Not only this, they ordered for peers too. Massive misuse of developer programs!!!</p>\n<p>Certificates that prove implementation of skill : In this competitive world, how can one distinguish between one with actual skills and the other just pretending, both holding certificates of course completion? We strongly believe that there must be a certificate that actually proves one's ability to implement those skills. Course completion and implementation of skills acquired are completely different things. See it's like learning some new language and not speaking it! People with problem solving skills and ability to make a difference, make a positive impact must get these special certificates. Hence, these programs need to be monitored properly. We have to make sure only good people become leaders and they actually solve problems and promote community growth. Note that these conclusions are not just made up but drawn from careful observations in surroundings.</p>\n<p><strong>CSSI for India :</strong> The environment in colleges below 2nd tier is very disturbed. There is lack of experienced faculties, seniors and alumni. So, a person is never given a big picture of what careers are there in CS, the different paths one can follow. In foreign, Google has a CSSI program. Why can't it be introduced in India as well? It is very much needed in these colleges.</p>\n<p><strong>Awareness about programs :</strong> Last but not the least, students are often aware of amazing programs like Google's Build for Digital India, Explore ML, Imagine cup and DSC Solution Challenge. Even DSCs do not promote such events. Students don't even know about career opportunities like STEP Internship. These opportunities must be acknowledged to as many students as possible to give a fair chance to everyone for career advancements.</p>\n<p><strong>Student exchange programs :</strong> A new program can be introduced wherein students of the local community visit other colleges to collaborate and build community there.</p>\n<p>Note that all this has to be done just once. Once a community is built and we have true leaders, this problem will then be solved in an exponential manner. Just a spark is needed.</p>\n<h3>Seniors in colleges who are good in CS</h3>\n<p>Einstein said \"If you can't explain it simply, you don't understand it well enough.\" If you are really good at something, you must try to share it to as many people as you can. Inspire others, have a greater impact on others. There are students who need help from people like you. Try writing your B.Tech experience, mistakes to be avoided, events worth attending and a lot more.</p>\n<h3>Seniors experiencing this problem</h3>\n<p>This is intended for students who are badly struck by this bad education system, who never got to learn how to code and what CS is all about.</p>\n<p>Before giving up on CSE, I humbly request you to please try once more. Try a bit harder this time. Coding is an important part of today's technical world. And it is not me who is saying this.</p>\n<p>Just visit <a href=\"http://code.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">code.org</code></a> and watch this</p>\n<p><code class=\"language-text\">youtube: nKIu9yen5nc</code></p>\n<p>video to see how much willingness people have to help people for promoting coding culture. If you are willing to take a Service oriented job, please think once again, how long will it satisfy your needs? Would you be able to sustain in this competitive world without having true CS skills? Think again!! Please grab a skill and show how useful you can be to the world. Apply those skills and solve problems. That's what Engineering is! The Internet is full of free resources to help you learn how to code. You just need persistence and determination to conquer this world. Go out and see how code can change your and others life. CS is truly amazing. Go explore and build your world!!!</p>\n<h3>Freshers / Juniors about to experience this problem</h3>\n<p>You are completely new to this world. Unless already told by your relatives or seniors, you may be lacking direction. We want you to carefully understand following points:</p>\n<ul>\n<li>Faculties, College exams and College isn't going to help you get into Product based companies</li>\n<li>You have to make extra efforts and make your way</li>\n<li>Take as much help you can from Google. Just search wherever you find difficulty. There are many out there who want to help.</li>\n<li>Focus on problem solving skills. During your course, grab a development skill like Actions on Google / Android / iOS / web / Flutter / React app development and develop something usable</li>\n<li>Don't even think of neglecting core CS subjects. They are the Crux of CSE. Try taking an online GATE course or read books to clear all the concepts.</li>\n<li>Follow (or find first) your passion in CS. What makes you feel happy. Go for it work hard, use up all your energy in right direction and I promise you it will definitely get you somewhere you will love</li>\n<li>Focus on implementation and project based learning</li>\n<li>Ask out, create community, discuss in groups, figure out ways to use these amazing technologies to solve problems</li>\n<li>Participate in events and see where you stand</li>\n<li>DSA!! Just be strong at this and practice a lot on online coding platforms</li>\n<li>We have prepared a list of some of the best &#x26; FREE resources to learn from. (List coming soon...)</li>\n</ul>\n<h3>Students planning to take B. Tech CSE</h3>\n<p>If you have cracked JEE and have found your way to dream institute, you are good to go. We wish you good luck. Happy CSE! But if you haven't cracked JEE, you have two options :</p>\n<ol>\n<li>Keep trying until you crack JEE</li>\n<li>Go with normal private college and prepare for GATE</li>\n</ol>\n<p>First option is not for you if you hate PCM. So, you will have to go through this harsh reality and work hard to find your way. Otherwise try and get into IIT to get a quality education and competitive environment.</p>\n<h3>All CSE students</h3>\n<p>Without collaborating, nothing can happen. None of the initiatives mentioned above could make sense without a team and community. Prestigious colleges are where they are today due to their communities. A team requires people with actual skills, who can apply skills to solve problems. But in CSE, most of the skills require that students know how to code. And these colleges are not even able to teach coding well. Many students struggle finding the best DSA course just for the sake of competitive programming and landing up in tech giants.</p>\n<p>Don't be a programmer, be a problem solver! Also try to step out of online judge and see that the world around you is full of problems. Use technologies along with code to solve problems. Challenge your imagination to make this world a better place. As Microsoft says \"Code. Build and Share\". Solve problems and share your stories with fellow students to promote problem solving culture. Then only things will change.</p>"}},{"node":{"frontmatter":{"title":"Understanding Colors🌈","description":"Color harmonies are particularly pleasing combinations of two or more colors","slug":"/pensieve/Understanding-Colors","date":"2020-04-01","tags":["deepdive🤿","web development"],"draft":false},"html":"<h2>Color Harmonies</h2>\n<p>Color harmonies are particularly pleasing combinations of two or more colors derived from their relationship on a color wheel. Also known as color chords, color harmonies are useful when exploring a possible color palette, or can be used as a standalone color scheme.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheel-complementary-8a2cae80.svg\" alt=\"Complementary Color Harmony  HTML Color Codes\"></p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheels-complementary-f8379f59.svg\" alt=\"Complementary Color Harmonies  HTML Color Codes\"></p>\n<h3>COMPLEMENTARY COLORS</h3>\n<p>Colors that are directly opposite one another on the color wheel are known as complementary colors. Complementary colors have a high contrast and can be very effective as accent colors when paired with a more neutral palette.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheel-triadic-bd73abc7.svg\" alt=\"Triadic Color Harmony  HTML Color Codes\"></p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheels-triadic-f2238b53.svg\" alt=\"Triadic Color Harmonies  HTML Color Codes\"></p>\n<h3>TRIADIC COLORS</h3>\n<p>Triadic harmonies consist of three colors equidistant from one another on the color wheel. Like complementary colors, triadic schemes tend to be very bright with a high contrast and work best when one color dominates.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheel-tetradic-b1ebdc49.svg\" alt=\"Tetradic Color Harmony  HTML Color Codes\"></p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheels-tetradic-fd6bc86b.svg\" alt=\"Tetradic Color Harmonies  HTML Color Codes\"></p>\n<h3>TETRADIC COLORS</h3>\n<p>Tetradic color harmonies are formed by two sets of complementary colors 60 degrees apart on the color wheel. Tetradic schemes are an excellent starting point for creating color palettes; fine tune them using color shades, tints and tones.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheel-analogous-920e8f13.svg\" alt=\"Analogous Color Harmony  HTML Color Codes\"></p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheels-analogous-c5bdfb35.svg\" alt=\"Analogous Color Harmonies  HTML Color Codes\"></p>\n<h3>ANALOGOUS COLORS</h3>\n<p>Analogous harmonies are created by selecting the colors directly adjacent to a chosen color. Frequently found in web design, analogous schemes, when paired with a complementary color for contrast, can offer great versatility.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheel-neutral-920e8f13.svg\" alt=\"Neutral Color Harmony  HTML Color Codes\"></p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-wheels-neutral-c5bdfb35.svg\" alt=\"Neutral Color Harmonies  HTML Color Codes\"></p>\n<h3>NEUTRAL COLORS</h3>\n<p>Neutral schemes, like analogous harmonies, are formed by taking the colors on either side of a chosen color but at half the distance. While analogous schemes typically use colors 30 degrees apart, neutral harmonies use colors 15 degrees apart.</p>\n<h2>Color Shades, Tints and Tones</h2>\n<p>Color shades, tints and tones are created by adding black, white and gray respectively to a chosen color. They can be very useful in web design for backgrounds and typography, and are often paired with a complementary color for contrast. Try them with your own color using the dropdown menu below the color picker.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-shades-9d0efa0b.svg\" alt=\"Color Shades  HTML Color Codes\"></p>\n<h3>COLOR SHADES</h3>\n<p>Adding black in varying levels to a color produces gradually darker variants, or 'shades', of that particular color. Shades work well for link hover effects, or as footer and header backgrounds.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-tints-eb0738d4.svg\" alt=\"Color Tints  HTML Color Codes\"></p>\n<h3>COLOR TINTS</h3>\n<p>Color tints are made by adding white to a color, resulting in increasingly lighter versions. Tints can also be used for CSS hover effects, and perform nicely as modal backgrounds.</p>\n<p><img src=\"https://blog.jueezy.rocks/blog-images/understandingcolors/html-color-codes-color-tones-f141a793.svg\" alt=\"Color Tones  HTML Color Codes\"></p>\n<h3>COLOR TONES</h3>\n<p>Tones are created by adding gray to a color, and produces an almost endless variety of colors depending on what level of gray is used. Less common in web design, tones could be useful for typographic elements like comments, quotes or highlights.</p>"}},{"node":{"frontmatter":{"title":"9 Projects you can do to become a Frontend Master","description":"To helping you become Frontend Masters in 2020 I have collected 9 different projects","slug":"/pensieve/9-projects-you-can-do-to-become-a-frontend-Master","date":"2020-01-18","tags":["react","vue","angular","javascript","web development"],"draft":false},"html":"<h2>Introduction</h2>\n<p>Wether you are new to programming or already an experienced developer. In this industry learning new concepts and languages/frameworks is mandatory to keep up with the rapid changes. Take for example React - open-sourced by Facebook just a shy 4 years ago it already became the number one choice for JavaScript devs around the globe. But also Vue and Angular of course have their legitimate follower-base. And then there is Svelte, and universal frameworks like Next.js or Nuxt.js, and Gatsby, and Gridsome, and Quasar, and and and. If you want to shine as an expert JavaScript developer you should at least have some experience in different frameworks and libraries - besides doing your homework with good, old JS.</p>\n<p>To helping you become Frontend Masters in 2020 I have collected 9 different projects, each with a distinct topic and a different JavaScript framework or library as tech stack that you can build and add to your portfolio. Remember, nothing helps you more than actually building stuff so go ahead, sharpen your mind and make this happen!</p>\n<h2>1. Build a movie search app using React (with hooks)</h2>\n<p>The first thing you could start with is building a movie search app using React. Below is an image of how the final app will look like:</p>\n<h3>What you will learn</h3>\n<p>Building this application you will improve your React Skills using the relatively new Hooks API. The example projects makes use of React components, many hooks, an external api and of course some styling via CSS.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>React with Hooks</li>\n<li>create-react-app</li>\n<li>JSX</li>\n<li>CSS</li>\n</ul>\n<p>Using no classes this projects gives you a perfect entry point into functional react and will definitely help you in 2020. You can find the example project here: <a href=\"https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/</a></p>\n<h3>Follow along with the tutorial or give it your own flavor</h3>\n<h2>2. Build a chat app with Vue</h2>\n<p>Another great project for you is to build a chat app using my favorite JavaScript library VueJS. The app will look something like this:</p>\n<h3>What you will learn</h3>\n<p>Following this tutorial you will learn how to setup a Vue app from scratch, creating components, handling state, creating route, connecting to a third party service and even handling authentication.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Vue</li>\n<li>Vuex</li>\n<li>Vue Router</li>\n<li>Vue CLI</li>\n<li>Pusher</li>\n<li>CSS</li>\n</ul>\n<p>This is really a great project to get started with Vue or to improve your existing skills to tackle development in 2020. You can find the tutorial right here: <a href=\"https://www.sitepoint.com/pusher-vue-real-time-chat-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.sitepoint.com/pusher-vue-real-time-chat-app/</a></p>\n<h2>3. Build a beautiful weather app with Angular 8</h2>\n<p>This example will help you to build a beautiful weather app using Google's Angular 8:</p>\n<h3>What you will learn</h3>\n<p>This project will teach you valuable skills such while creating an application from scratch, starting with design over development all the way to a production ready deployment.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Angular 8</li>\n<li>Firebase</li>\n<li>Server-Side Rendering</li>\n<li>CSS with Grid Layout and Flexbox</li>\n<li>Mobile friendly &#x26; responsive</li>\n<li>Dark Mode</li>\n<li>Beautiful UI</li>\n</ul>\n<p>What I really, really like about this comprehensive project is that you do not learn things in isolation but the whole development process from the design to the final deployment. You should really do this one!</p>\n<p><a href=\"https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e</a></p>\n<h2>4. Build a to-do app with Svelte</h2>\n<p>Svelte kinda is the new kid on the block compared to React, Vue and Angular but nonetheless one of the hotties for 2020. Okay, To-Do apps are not necessarily the hottest topic out there but this will really help you to sharpen you Svelte skills and look like this:</p>\n<h3>What you will learn</h3>\n<p>This tutorial will show you how to make an app using Svelte 3 from start to finish. It makes use of components, styling and event handlers</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Svelte 3</li>\n<li>Components</li>\n<li>Styling via CSS</li>\n<li>ES 6 syntax</li>\n</ul>\n<p>There aren't that many good Svelte starter projects out there so I find this one to be kinda good to start with. And who knows, maybe you are the one creating another, more comprehensive Svelte tutorial that will be presented in the next year's version of this post?<a href=\"https://medium.com/codingthesmartway-com-blog/building-a-svelte-3-todo-app-from-start-to-deployment-1737f72c23a6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/codingthesmartway-com-blog/building-a-svelte-3-todo-app-from-start-to-deployment-1737f72c23a6</a></p>\n<h2>5. Build an e-commerce shopping cart with Next.js</h2>\n<p>NextJs is the most popular framework for creating React applications that support server-side rendering out of the box. This project will show you how to build an e-commerce shopping cart looking like this:</p>\n<h3>What you will learn</h3>\n<p>In this project you will learn how to setup a Next.js development environment, create new pages and components, fetch data, style and deploy a next application.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Next.js</li>\n<li>Components and Pages</li>\n<li>Data Fetching</li>\n<li>Styling</li>\n<li>Deployment</li>\n<li>SSR and SPA</li>\n</ul>\n<p>It is always great to have a real world example such as an e-commerce showcase to learn something new. You can find the tutorial here:</p>\n<p><a href=\"https://snipcart.com/blog/next-js-ecommerce-tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://snipcart.com/blog/next-js-ecommerce-tutorial</a></p>\n<h2>6. Build a full blown multi-language blog website Nuxt.js</h2>\n<p>Nuxt.js is to Vue what Next.js is to react. A great framework to combine the power of server-side rendering and single-page applications. The final app that you could create will look like this:</p>\n<h3>What you will learn</h3>\n<p>This example project will teach you how to build a full blown website using Nuxt.js from the initial setup to the final deployment. It makes use of many of the cool features Nuxt has to offer like pages and components as well as styling with SCSS.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Nuxt.js</li>\n<li>Components and Pages</li>\n<li>Storyblok module</li>\n<li>Mixins</li>\n<li>Vuex for state management</li>\n<li>SCSS for styling</li>\n<li>Nuxt middlewares</li>\n</ul>\n<p>This is a really cool project for you and covers many of the great features of Nuxt.js. I personally love working with Nuxt so you should really try this one out as it will also make you a better Vue developer!</p>\n<p><a href=\"https://www.storyblok.com/tp/nuxt-js-multilanguage-website-tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.storyblok.com/tp/nuxt-js-multilanguage-website-tutorial</a></p>\n<h2>7. Build a Blog with Gatsby</h2>\n<p>Gatsby is a great static site generator that uses React and GraphQL under the hood. This is the result of this project:</p>\n<h3>What you will learn</h3>\n<p>In this tutorial you will learn how to leverage Gatsby to build an outstanding blog that you could well use for writing your own articles while making use of React and GraphQL.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Gatsby</li>\n<li>React</li>\n<li>GraphQL</li>\n<li>Plugins &#x26; Themes</li>\n<li>MDX / Markdown</li>\n<li>Bootstrap CSS</li>\n<li>Templates</li>\n</ul>\n<p>If you ever wanted to start a blog this is a great example how to do so leveraging React and GraphQL. I am not saying that Wordpress always is a bad choice but with Gatsby you can create highly performant sites while using React which is an awesome combination!</p>\n<p><a href=\"https://blog.bitsrc.io/how-to-build-a-blog-with-gatsby-and-boostrap-d1270212b3dc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.bitsrc.io/how-to-build-a-blog-with-gatsby-and-boostrap-d1270212b3dc</a></p>\n<h2>8. Build a Blog with Gridsome</h2>\n<p>Gridsome is to Vue...Okay, we already had that with Next/Nuxt but the same is true for Gridsome and Gatsby. Both use GraphQL as a data layer but Gridsome makes use of VueJS. It also is an awesome static site generator that will help you create great blogs:</p>\n<h3>What you will learn</h3>\n<p>This project will teach you how to build a simple blog to get started with Gridsome, GraphQL and Markdown. It also covers how to deploy the application via Netlify.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Gridsome</li>\n<li>Vue</li>\n<li>GraphQL</li>\n<li>Markdown</li>\n<li>Netlify</li>\n</ul>\n<p>This for sure isn't the most comprehensive tutorial but covers the basic concepts of Gridsome and Markdown and could be a good starting point.</p>\n<p><a href=\"https://www.telerik.com/blogs/building-a-blog-with-vue-and-markdown-using-gridsome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.telerik.com/blogs/building-a-blog-with-vue-and-markdown-using-gridsome</a></p>\n<h2>9. Build a SoundCloud-like audio player app with Quasar</h2>\n<p>Quasar is another Vue framework that can also be used to build mobile applications. In this project you will create an audio player app looking like this:</p>\n<h3>What you will learn</h3>\n<p>While the other projects focus mainly on web applications this one will show you how to create a mobile app using Vue via the Quasar framework. You should already have a working Cordova setup with android studio / xcode configured. If not there is a link in the tutorial to the quasar website where they show you how to set this up.</p>\n<h3>Tech Stack &#x26; Features</h3>\n<ul>\n<li>Quasar</li>\n<li>Vue</li>\n<li>Cordova</li>\n<li>Wavesurfer</li>\n<li>UI Components</li>\n</ul>\n<p>A small project that shows the power of Quasar for building mobile apps.</p>\n<p><a href=\"https://www.learningsomethingnew.com/how-to-build-a-sound-cloud-like-audio-player-app-with-vue-js-quasar-and-wave-surfer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.learningsomethingnew.com/how-to-build-a-sound-cloud-like-audio-player-app-with-vue-js-quasar-and-wave-surfer</a></p>\n<h1>Conclusion</h1>\n<blockquote>\n<p>In this article I showed you 9 projects that you can build, each focussing on another JavaScript framework or library. Now the choice is all yours: Will you try something new by using a framework you haven't used before? Or do you want to strengthen your skills by doing a project for a technology you already have some knowledge in? Or will you rely on your favorite framework/library and do all the projects with it?</p>\n</blockquote>"}}]}},"pageContext":{}}}